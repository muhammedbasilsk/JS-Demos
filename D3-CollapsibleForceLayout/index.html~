<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <link type="text/css" rel="stylesheet" href="style.css"/>
    <style type="text/css">

circle.node {
  cursor: pointer;
  stroke: #000;
  stroke-width: .5px;
}

line.link {
  fill: none;
  stroke: #9ecae1;
  stroke-width: 1.5px;
}
.tooltip {
	background:transparent url(black_arrow.png);
	font-size:15px;
	height:70px;
	width:160px;
	padding:25px;
	color:#eee;
	overflow:auto;
	max-width: 300px;
	max-height: 300px;
   }
    </style>
  </head>
  <body>
    <div id="chart"></div>
    <script src="http://cdn.jquerytools.org/1.2.6/jquery.tools.min.js" type="text/javascript"></script>
    <script type="text/javascript" src="jquery.min.js"></script>
    <script type="text/javascript" src="http://d3js.org/d3.v2.min.js?2.9.3"></script>
    <script type="text/javascript">

var w = 1280,
    h = 800,
    node,
    link,
    root;

var force = d3.layout.force()
    .on("tick", tick)
    .charge(function(d) { return d._children ? -d.size / 100 : -30; })
    .linkDistance(function(d) { return d.target._children ? 80 : 30; })
    .size([w, h - 160]);

force.gravity(0);

var vis = d3.select("#chart")
	.append("svg:svg")
	.attr("width", w)
    	.attr("height", h)
	.call(d3.behavior.zoom().on("zoom", zoomAndPan))
	.append("svg:g").attr('class', 'inner-g')
    	.attr("width", w)
    	.attr("height", h);

d3.json("flare.json", function(json) {
  root = json;
  root.fixed = true;
  root.x = w / 2;
  root.y = h / 2 - 80;
  update();
});

function update() {
  var nodes = flatten(root),
      links = d3.layout.tree().links(nodes);
  // Restart the force layout.
  force.nodes(nodes)
       .links(links)
       .start();
  setTimeout(function() {
          force.stop();
 	 }, 3000);

  // Update the links…
  link = vis.selectAll("line.link")
      .data(links, function(d) { 
	return d.target.id; });

  // Enter any new links.
  link.enter().insert("svg:line", ".node")
      .attr("class", "link")
      .attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; })
      .attr("source",function(d) { return d.source.id; })
      .attr("target",function(d) { return d.target.id; });

  // Exit any old links.
  link.exit().remove();

  // Update the nodes…
  node = vis.selectAll("circle.node")
      .data(nodes, function(d) { return d.id; })
      .style("fill", color);

  node.transition()
      .attr("r", function(d) { return d.children ? 4.5 : Math.sqrt(d.size) / 10; });

  // Enter any new nodes.
  node.enter().append("svg:circle")
      .attr("class", "node")
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; })
      .attr("r", function(d) { return d.children ? 4.5 : Math.sqrt(d.size) / 10; })
      .style("fill", color)
      .attr("id",function(d){ return d.id; })
     /* .append("svg:title")
      .text(function(d){ return d.name; })*/
     .on("mouseover", function(d){
                var allNodes = vis.selectAll("circle.node");
		/*$.each(allNodes[0],function(){
			if(this.id == d.id){
				$(this).attr("style","fill:red");
				 
			}
		});*/
		var allLinks = vis.selectAll("line.link");
		$.each(allLinks[0],function(){
			if(parseInt($(this).attr('source')) == d.id || parseInt($(this).attr('target')) == d.id){
				var target = $(this).attr('target');
				var source = $(this).attr('source');
				$(this).css("stroke","black");
				$.each(allNodes[0],function(){
					if(target == this.id || source == this.id){
						$(this).css("fill","red");
					}
				});
			}
		});
	})
      .on("mouseout", function(d){
		var selectedNode = d.name;
                var allNodes = vis.selectAll("circle.node");
		/*$.each(allNodes[0],function(){
			if(this.id == d.id){
				$(this).attr("style","fill:"+color(d)+"");
			}
		});*/
		var allLinks = vis.selectAll("line.link");
		$.each(allLinks[0],function(){
			if(parseInt($(this).attr('source')) == d.id || parseInt($(this).attr('target')) == d.id){
				var target = $(this).attr('target');
				var source = $(this).attr('source');
				$(this).css("stroke","#9ecae1");
				$.each(allNodes[0],function(){
					if(target == this.id || source == this.id){
						$(this).css("fill",color(this));
					}
				});
			}
		});
	})
	 /*.on("mouseover", function(d){
		 var name = d.name;
		 d3.select("#tooltipDiv").remove();
		 tooltip = d3.select("#chart")
		.append("div")
		.attr("id","tooltipDiv")
		.style("position", "absolute")
		.style("z-index", "5")
		.style("visibility", "true")
		.attr('class',"tooltip")
		.html('<div><table align="center" cellpadding="3"><tr><td valign="bottom" align="center">'+name+'</tr><table></div>');			  			  
		return tooltip})
	.on("mousemove", function(){
		return tooltip.style("top", (d3.event.pageY-10)+"px").style("left",(d3.event.pageX+10)+"px");})
	.on("mouseout", function(){return tooltip.style("visibility", "hidden");})*/
        .on("click", click)
        .call(force.drag);

  // Exit any old nodes.
  node.exit().remove();
}

function tick() {
  link.attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });

  node.attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; });
}

// Color leaf nodes orange, and packages white or blue.
function color(d) {
  return d._children ? "#3182bd" : d.children ? "#c6dbef" : "#fd8d3c";
}

// Toggle children on click.
function click(d) {
  console.log(d);
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
  update();
}

// Returns a list of all nodes under the root.
function flatten(root) {
  var nodes = [], i = 0;

  function recurse(node) {
    if (node.children) node.size = node.children.reduce(function(p, v) { return p + recurse(v); }, 0);
    if (!node.id) node.id = ++i;
    nodes.push(node);
    return node.size;
  }

  root.size = recurse(root);
  return nodes;
}
 function zoomAndPan() {
  		vis.attr("transform",
                              "translate(" + d3.event.translate + ")"
                              + " scale(" + d3.event.scale + ")");
}
    </script>
  </body>
</html>
